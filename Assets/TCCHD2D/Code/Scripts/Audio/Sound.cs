// Created by SÃ©rgio Murillo da Costa Faria

using System;
using Sirenix.OdinInspector;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.Serialization;

namespace MuriPNG.Audio
{
    public enum SoundTab { SoundInfo, SoundSettings, SoundEvents }
    
    [Serializable]
    public class Sound
    {
        #region === Variables ===============================================================

        #region === Basic Sound Info ========================================================

        [FoldoutGroup("$name")]
        [FoldoutGroup("$name/General Info")]
        [Tooltip("Sound ID"), Required, SerializeField]
        private string name;

        [FoldoutGroup("$name/General Info")]
        [Tooltip("Sound Audio Clip"), Required, SerializeField]
        private AudioClip clip;

        [FoldoutGroup("$name/General Info")]
        [EnumToggleButtons, HideLabel]
        public SoundTab tab;

        #endregion ==========================================================================

        #region === Sound Info ==============================================================

        [FoldoutGroup("$name/Sound Info")]
        [Tooltip("The AudioSource that will play the sound. If not specified, an AudioSource from the AudioManager's list of AudioSources will be used.")]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField]
        private AudioSource source;

        [FoldoutGroup("$name/Sound Info")]
        [Tooltip("Reference position to use when playing the sound. If not specified, the position will be the same as the AudioSource.")]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField]
        private Transform position;

        [FoldoutGroup("$name/Sound Info")]
        [Tooltip("Audio group where the sound volume will come out.")]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField]
        private AudioMixerGroup output;

        #endregion ==========================================================================

        #region === Sound Settings ==========================================================

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("If the sound settings will be based on a SoundSettings scriptable object.")]
        [ShowIf("tab", SoundTab.SoundSettings), LabelText("Override Settings"), SerializeField]
        private bool usePreDefinedSettings;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("The set of sound configuration rules.")]
        [ShowIf("usePreDefinedSettings"), InlineEditor, SerializeField]
        private SoundSettings soundSettings;

        [Space(2)]
        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Is the audio clip in loop?")]
        [Title("Individual Settings", titleAlignment: TitleAlignments.Centered, horizontalLine: true, bold: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool loop;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("If set to true, the audio source will start playing automatically when created.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool playOnAwake;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("If the sound is muted or not")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool mute;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Ignore effects (applied from filter components or listener global filters).")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool ignoreEffects;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("When set, global effects on the AudioListener will not be applied to the audio signal generated by the AudioSource. Does not apply if the AudioSource is playing in an AudioMixer group.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool ignoreListenerEffects;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("When set, does not route the signal of an AudioSource to the global reverb associated with the reverb zones.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool ignoreReverbZone;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Enables or disables spatialization.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private bool spatialize;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Defines the priority of the AudioSource.")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 256f), SerializeField]
        private int priority = 128;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("The volume of the audio source (0.0 to 1.0).")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1f), SerializeField]
        private float volume = 1;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("The pitch of the audio source.")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(.1f, 3f), SerializeField]
        private float pitch = 1;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Shifts a stereo sound (left or right) being played. This only applies to Mono or Stereo sounds.")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(-1, 1f), SerializeField]
        private float panStereo;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Defines how much this AudioSource is affected by 3D spatialization calculations (attenuation, doppler etc). 0.0 makes the sound fully 2D, 1.0 makes the sound fully 3D.")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1f), SerializeField]
        private float spacialBlend;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("The amount by which the signal of an AudioSource will be mixed into the global reverb associated with the reverb zones.")]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1.1f), SerializeField]
        private float reverbZoneMix = 1;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Defines the Doppler scale for this AudioSource.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private float dopplerLevel = 1;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Defines the spread angle (in degrees) of a 3D stereo or multichannel sound in speaker space.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private float spread;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Defines how the AudioSource attenuates over distance.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private AudioRolloffMode rollOffMode = AudioRolloffMode.Logarithmic;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("Within the minimum distance, the AudioSource will stop increasing the volume.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private float minimumDistance = 1;

        [FoldoutGroup("$name/Sound Settings", expanded: true)]
        [Tooltip("(Logarithmic rollOff) maximum distance is the distance at which a sound stops attenuating.")]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField]
        private float maximumDistance = 500;

        #endregion

        #region === Sound Events ==============================================================

        [FormerlySerializedAs("onPlay")]
        [FoldoutGroup("$name/Sound Events", expanded: true)]
        [Space(2)]
        [Tooltip("Event called when the sound starts playing.")]
        [ShowIf("tab", SoundTab.SoundEvents), SerializeField]
        private UnityEvent play;

        [FormerlySerializedAs("onStop")]
        [FoldoutGroup("$name/Sound Events", expanded: true)]
        [Tooltip("Event called when the sound stops playing.")]
        [ShowIf("tab", SoundTab.SoundEvents), SerializeField]
        private UnityEvent stop;

        #endregion

        #endregion ==========================================================================

        #region === Properties ==============================================================

        public string Name
        {
            get => name;
            set => name = value;
        }
        public AudioClip Clip
        {
            get => clip;
            set => clip = value;
        }
        public AudioSource Source
        {
            get => source;
            set => source = value;
        }
        public Transform Position
        {
            get => position;
            set => position = value;
        }
        public AudioMixerGroup Output
        {
            get => output;
            set => output = value;
        }
        public bool Mute
        {
            get => mute;
            set => mute = value;
        }
        public bool IgnoreEffects
        {
            get => ignoreEffects;
            set => ignoreEffects = value;
        }
        public bool IgnoreListenerEffects
        {
            get => ignoreListenerEffects;
            set => ignoreListenerEffects = value;
        }
        public bool IgnoreReverbZone
        {
            get => ignoreReverbZone;
            set => ignoreReverbZone = value;
        }
        public bool PlayOnAwake
        {
            get => playOnAwake;
            set => playOnAwake = value;
        }
        public bool Loop
        {
            get => loop;
            set => loop = value;
        }
        public bool Spatialize
        {
            get => spatialize;
            set => spatialize = value;
        }
        public int Priority
        {
            get => priority;
            set => priority = value;
        }
        public float Volume
        {
            get => volume;
            set => volume = value;
        }
        public float Pitch
        {
            get => pitch;
            set => pitch = value;
        }
        public float PanStereo
        {
            get => panStereo;
            set => panStereo = value;
        }
        public float SpacialBlend
        {
            get => spacialBlend;
            set => spacialBlend = value;
        }
        public float ReverbZoneMix
        {
            get => reverbZoneMix;
            set => reverbZoneMix = value;
        }
        public float DopplerLevel
        {
            get => dopplerLevel;
            set => dopplerLevel = value;
        }
        public float Spread
        {
            get => spread;
            set => spread = value;
        }
        public AudioRolloffMode RollOffMode
        {
            get => rollOffMode;
            set => rollOffMode = value;
        }
        public float MinimumDistance
        {
            get => minimumDistance;
            set => minimumDistance = value;
        }
        public float MaximumDistance
        {
            get => maximumDistance;
            set => maximumDistance = value;
        }

        #endregion ==========================================================================

        #region === Methods =================================================================

        /// <summary>Plays the audio source.</summary>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio source.
        /// It also invokes the <see cref="play"/> event, if it is not null.
        /// </remarks>
        public void Play()
        {
            ApplySoundSettings();
            source.Play();
            play?.Invoke();
        }
        /// <summary>Plays the audio clip once.</summary>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio clip once.
        /// After the audio clip is played, the onPlay event is invoked.
        /// </remarks>
        public void PlayOnce()
        {
            ApplySoundSettings();
            source.PlayOneShot(clip);
            play?.Invoke();
        }
        /// <summary>Plays an audio clip at a specified position in 3D space.</summary>
        /// <param name="soundPosition">The position in 3D space where the audio clip should be played.</param>
        /// <remarks>
        /// This method applies the sound settings to the audio source and plays the audio clip at the specified position.
        /// It also invokes the onPlay event, if it is not null.
        /// </remarks>
        public void PlayOnPosition(Vector3 soundPosition)
        {
            ApplySoundSettings();
            AudioSource.PlayClipAtPoint(clip, soundPosition);
            play?.Invoke();
        }
        /// <summary>Plays the audio clip with a specified delay.</summary>
        /// <param name="delay">The delay in seconds before playing the audio clip.</param>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio clip.
        /// It then plays the audio clip with the specified delay.
        /// Finally, it invokes the onPlay event if it is not null.
        /// </remarks>
        public void PlayDelayed(float delay)
        {
            ApplySoundSettings();
            source.PlayDelayed(delay);
            play?.Invoke();
        }
        /// <summary>Stops the source and invokes the onStop event.</summary>
        /// <remarks>
        /// This method stops the source and invokes the onStop event, if it is not null.
        /// </remarks>
        public void Stop()
        {
            source.Stop();
            stop?.Invoke();
        }
        /// <summary>Plays the audio clip if it exists.</summary>
        /// <remarks>This method is intended to be used as a callback for a button click event.</remarks>
        [Button("Play Sample")]
        public void PlaySample()
        {
            if (clip != null)
                Play();
        }
        /// <summary>Applies the sound settings to the audio source.</summary>
        /// <remarks>
        /// This method sets the audio clip, output audio mixer group, and position of the audio source.
        /// It then applies the sound settings to the audio source, either using the pre-defined settings or the custom settings.
        /// </remarks>
        public void ApplySoundSettings()
        {
            source.clip = clip;
            source.outputAudioMixerGroup = output;
            if (position == null)
                position = source.transform;
            source.transform.position = position.position;

            switch (usePreDefinedSettings)
            {
                case false:
                    source.loop = loop;
                    source.playOnAwake = playOnAwake;
                    source.mute = mute;
                    source.bypassEffects = ignoreEffects;
                    source.bypassListenerEffects = ignoreListenerEffects;
                    source.bypassReverbZones = ignoreReverbZone;
                    source.spatialize = spatialize;
                    source.priority = priority;
                    source.volume = volume;
                    source.pitch = pitch;
                    source.panStereo = panStereo;
                    source.spatialBlend = spacialBlend;
                    source.reverbZoneMix = reverbZoneMix;
                    source.dopplerLevel = dopplerLevel;
                    source.spread = spread;
                    source.rolloffMode = rollOffMode;
                    source.minDistance = minimumDistance;
                    source.maxDistance = maximumDistance;
                    break;
                case true:
                    source.loop = soundSettings.loop;
                    source.playOnAwake = soundSettings.playOnAwake;
                    source.mute = soundSettings.mute;
                    source.bypassEffects = soundSettings.ignoreEffects;
                    source.bypassListenerEffects = soundSettings.ignoreListenerEffects;
                    source.bypassReverbZones = soundSettings.ignoreReverbZone;
                    source.spatialize = soundSettings.spatialize;
                    source.priority = soundSettings.priority;
                    source.volume = soundSettings.volume;
                    source.pitch = soundSettings.pitch;
                    source.panStereo = soundSettings.panStereo;
                    source.spatialBlend = soundSettings.spacialBlend;
                    source.reverbZoneMix = soundSettings.reverbZoneMix;
                    source.dopplerLevel = soundSettings.dopplerLevel;
                    source.spread = soundSettings.spread;
                    source.rolloffMode = soundSettings.rollOffMode;
                    source.minDistance = soundSettings.minimumDistance;
                    source.maxDistance = soundSettings.maximumDistance;
                    break;
            }
        }
        #endregion ==========================================================================
    }
}