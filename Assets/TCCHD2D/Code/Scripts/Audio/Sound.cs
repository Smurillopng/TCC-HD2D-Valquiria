using System;
using Sirenix.OdinInspector;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.Serialization;

namespace MuriPNG.Audio
{
    public enum SoundTab { SoundInfo, SoundSettings, SoundEvents }

    /// <summary>
    /// This class represents a sound.
    /// </summary>
    /// <remarks>
    /// It contains the sound ID, the audio clip, the audio source, the reference position, the volume, the pitch, the loop flag, the mute flag, the play on awake flag, the spatial blend, the min distance, the max distance, the rolloff mode, the doppler level, the spread, the priority, the mixer group, the exposed parameter name, the volume curve, the pitch curve, the on play event, the on stop event, the on pause event, the on resume event, the on mute event, and the on unmute event.
    /// </remarks>
    [Serializable]
    public class Sound
    {
        #region === Variables ===============================================================

        #region Basic Sound Info

        [Tooltip("Sound ID")]
        [FoldoutGroup("Sound", expanded: true)]
        [Required, SerializeField] private string name;

        [Tooltip("Sound Audio Clip")]
        [FoldoutGroup("Sound", expanded: true)]
        [Required, SerializeField] private AudioClip clip;

        [FoldoutGroup("Sound", expanded: true)]
        [EnumToggleButtons, HideLabel] public SoundTab tab;

        #endregion

        # region Sound Info

        [Tooltip("The AudioSource that will play the sound. If not specified, an AudioSource from the AudioManager's list of AudioSources will be used.")]
        [FoldoutGroup("Sound/Sound Info", expanded: true)]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField] private AudioSource source;

        [Tooltip("Reference position to use when playing the sound. If not specified, the position will be the same as the AudioSource.")]
        [FoldoutGroup("Sound/Sound Info", expanded: true)]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField] private Transform position;

        [Tooltip("Audio group where the sound volume will come out.")]
        [FoldoutGroup("Sound/Sound Info", expanded: true)]
        [ShowIf("tab", SoundTab.SoundInfo), SerializeField] private AudioMixerGroup output;

        #endregion

        #region Sound Settings

        [Tooltip("If the sound settings will be based on a SoundSettings scriptable object.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), LabelText("Override Settings"), SerializeField]
        private bool usePreDefinedSettings;

        [Tooltip("The set of sound configuration rules.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("usePreDefinedSettings"), InlineEditor, SerializeField] private SoundSettings soundSettings;

        [Space(2)]
        [Tooltip("Is the audio clip in loop?")]
        [Title("Individual Settings", titleAlignment: TitleAlignments.Centered, horizontalLine: true, bold: true)]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool loop;

        [Tooltip("If set to true, the audio source will start playing automatically when created.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool playOnAwake;

        [Tooltip("If the sound is muted or not")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool mute;

        [Tooltip("Ignore effects (applied from filter components or listener global filters).")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool ignoreEffects;

        [Tooltip("When set, global effects on the AudioListener will not be applied to the audio signal generated by the AudioSource. Does not apply if the AudioSource is playing in an AudioMixer group.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool ignoreListenerEffects;

        [Tooltip("When set, does not route the signal of an AudioSource to the global reverb associated with the reverb zones.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool ignoreReverbZone;

        [Tooltip("Enables or disables spatialization.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private bool spatialize;

        [Tooltip("Defines the priority of the AudioSource.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 256f), SerializeField] private int priority = 128;

        [Tooltip("The volume of the audio source (0.0 to 1.0).")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1f), SerializeField] private float volume = 1;

        [Tooltip("The pitch of the audio source.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(.1f, 3f), SerializeField] private float pitch = 1;

        [Tooltip("Shifts a stereo sound (left or right) being played. This only applies to Mono or Stereo sounds.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(-1, 1f), SerializeField] private float panStereo;

        [Tooltip("Defines how much this AudioSource is affected by 3D spatialization calculations (attenuation, doppler etc). 0.0 makes the sound fully 2D, 1.0 makes the sound fully 3D.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1f), SerializeField] private float spacialBlend;

        [Tooltip("The amount by which the signal of an AudioSource will be mixed into the global reverb associated with the reverb zones.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), Range(0f, 1.1f), SerializeField] private float reverbZoneMix = 1;

        [Tooltip("Defines the Doppler scale for this AudioSource.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private float dopplerLevel = 1;

        [Tooltip("Defines the spread angle (in degrees) of a 3D stereo or multichannel sound in speaker space.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private float spread;

        [Tooltip("Defines how the AudioSource attenuates over distance.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private AudioRolloffMode rollOffMode = AudioRolloffMode.Logarithmic;

        [Tooltip("Within the minimum distance, the AudioSource will stop increasing the volume.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private float minimumDistance = 1;

        [Tooltip("(Logarithmic rollOff) maximum distance is the distance at which a sound stops attenuating.")]
        [FoldoutGroup("Sound/Sound Settings", expanded: true)]
        [ShowIf("tab", SoundTab.SoundSettings), SerializeField] private float maximumDistance = 500;

        #endregion

        #region Sound Events

        [FormerlySerializedAs("onPlay")]
        [Space(2)]
        [Tooltip("Event called when the sound starts playing.")]
        [FoldoutGroup("Sound/Sound Events", expanded: true)]
        [ShowIf("tab", SoundTab.SoundEvents), SerializeField] private UnityEvent play;

        [FormerlySerializedAs("onStop")]
        [Tooltip("Event called when the sound stops playing.")]
        [FoldoutGroup("Sound/Sound Events", expanded: true)]
        [ShowIf("tab", SoundTab.SoundEvents), SerializeField] private UnityEvent stop;

        #endregion

        #endregion

        #region === Properties ==============================================================

        public string Name
        {
            get => name;
            set => name = value;
        }
        public AudioClip Clip
        {
            get => clip;
            set => clip = value;
        }
        public AudioSource Source
        {
            get => source;
            set => source = value;
        }
        public Transform Position
        {
            get => position;
            set => position = value;
        }
        public AudioMixerGroup Output
        {
            get => output;
            set => output = value;
        }
        public bool Mute
        {
            get => mute;
            set => mute = value;
        }
        public bool IgnoreEffects
        {
            get => ignoreEffects;
            set => ignoreEffects = value;
        }
        public bool IgnoreListenerEffects
        {
            get => ignoreListenerEffects;
            set => ignoreListenerEffects = value;
        }
        public bool IgnoreReverbZone
        {
            get => ignoreReverbZone;
            set => ignoreReverbZone = value;
        }
        public bool PlayOnAwake
        {
            get => playOnAwake;
            set => playOnAwake = value;
        }
        public bool Loop
        {
            get => loop;
            set => loop = value;
        }
        public bool Spatialize
        {
            get => spatialize;
            set => spatialize = value;
        }
        public int Priority
        {
            get => priority;
            set => priority = value;
        }
        public float Volume
        {
            get => volume;
            set => volume = value;
        }
        public float Pitch
        {
            get => pitch;
            set => pitch = value;
        }
        public float PanStereo
        {
            get => panStereo;
            set => panStereo = value;
        }
        public float SpacialBlend
        {
            get => spacialBlend;
            set => spacialBlend = value;
        }
        public float ReverbZoneMix
        {
            get => reverbZoneMix;
            set => reverbZoneMix = value;
        }
        public float DopplerLevel
        {
            get => dopplerLevel;
            set => dopplerLevel = value;
        }
        public float Spread
        {
            get => spread;
            set => spread = value;
        }
        public AudioRolloffMode RollOffMode
        {
            get => rollOffMode;
            set => rollOffMode = value;
        }
        public float MinimumDistance
        {
            get => minimumDistance;
            set => minimumDistance = value;
        }
        public float MaximumDistance
        {
            get => maximumDistance;
            set => maximumDistance = value;
        }

        #endregion

        #region === Methods =================================================================

        /// <summary>Plays the audio source.</summary>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio source.
        /// It also invokes the <see cref="play"/> event, if it is not null.
        /// </remarks>
        public void Play()
        {
            ApplySoundSettings();
            source.Play();
            play?.Invoke();
        }
        /// <summary>Plays the audio clip once.</summary>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio clip once.
        /// After the audio clip is played, the onPlay event is invoked.
        /// </remarks>
        public void PlayOnce()
        {
            ApplySoundSettings();
            source.PlayOneShot(clip);
            play?.Invoke();
        }
        /// <summary>Plays an audio clip at a specified position in 3D space.</summary>
        /// <param name="soundPosition">The position in 3D space where the audio clip should be played.</param>
        /// <remarks>
        /// This method applies the sound settings to the audio source and plays the audio clip at the specified position.
        /// It also invokes the onPlay event, if it is not null.
        /// </remarks>
        public void PlayOnPosition(Vector3 soundPosition)
        {
            ApplySoundSettings();
            AudioSource.PlayClipAtPoint(clip, soundPosition);
            play?.Invoke();
        }
        /// <summary>Plays the audio clip with a specified delay.</summary>
        /// <param name="delay">The delay in seconds before playing the audio clip.</param>
        /// <remarks>
        /// This method applies the current sound settings before playing the audio clip.
        /// It then plays the audio clip with the specified delay.
        /// Finally, it invokes the onPlay event if it is not null.
        /// </remarks>
        public void PlayDelayed(float delay)
        {
            ApplySoundSettings();
            source.PlayDelayed(delay);
            play?.Invoke();
        }
        /// <summary>Stops the source and invokes the onStop event.</summary>
        /// <remarks>
        /// This method stops the source and invokes the onStop event, if it is not null.
        /// </remarks>
        public void Stop()
        {
            source.Stop();
            stop?.Invoke();
        }
        /// <summary>Plays the audio clip if it exists.</summary>
        /// <remarks>This method is intended to be used as a callback for a button click event.</remarks>
        [Button("Play Sample")]
        public void PlaySample()
        {
            if (clip != null)
                Play();
        }
        /// <summary>Applies the sound settings to the audio source.</summary>
        /// <remarks>
        /// This method sets the audio clip, output audio mixer group, and position of the audio source.
        /// It then applies the sound settings to the audio source, either using the pre-defined settings or the custom settings.
        /// </remarks>
        public void ApplySoundSettings()
        {
            source.clip = clip;
            source.outputAudioMixerGroup = output;
            if (position == null)
                position = source.transform;
            source.transform.position = position.position;

            switch (usePreDefinedSettings)
            {
                case false:
                    source.loop = loop;
                    source.playOnAwake = playOnAwake;
                    source.mute = mute;
                    source.bypassEffects = ignoreEffects;
                    source.bypassListenerEffects = ignoreListenerEffects;
                    source.bypassReverbZones = ignoreReverbZone;
                    source.spatialize = spatialize;
                    source.priority = priority;
                    source.volume = volume;
                    source.pitch = pitch;
                    source.panStereo = panStereo;
                    source.spatialBlend = spacialBlend;
                    source.reverbZoneMix = reverbZoneMix;
                    source.dopplerLevel = dopplerLevel;
                    source.spread = spread;
                    source.rolloffMode = rollOffMode;
                    source.minDistance = minimumDistance;
                    source.maxDistance = maximumDistance;
                    break;
                case true:
                    source.loop = soundSettings.loop;
                    source.playOnAwake = soundSettings.playOnAwake;
                    source.mute = soundSettings.mute;
                    source.bypassEffects = soundSettings.ignoreEffects;
                    source.bypassListenerEffects = soundSettings.ignoreListenerEffects;
                    source.bypassReverbZones = soundSettings.ignoreReverbZone;
                    source.spatialize = soundSettings.spatialize;
                    source.priority = soundSettings.priority;
                    source.volume = soundSettings.volume;
                    source.pitch = soundSettings.pitch;
                    source.panStereo = soundSettings.panStereo;
                    source.spatialBlend = soundSettings.spacialBlend;
                    source.reverbZoneMix = soundSettings.reverbZoneMix;
                    source.dopplerLevel = soundSettings.dopplerLevel;
                    source.spread = soundSettings.spread;
                    source.rolloffMode = soundSettings.rollOffMode;
                    source.minDistance = soundSettings.minimumDistance;
                    source.maxDistance = soundSettings.maximumDistance;
                    break;
            }
        }
        #endregion
    }
}